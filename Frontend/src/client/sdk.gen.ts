// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { GetAllExpensesData, GetAllExpensesResponse, CreateExpenseData, DeleteExpenseData, DeleteExpenseResponse, GetExpenseByIdData, GetExpenseByIdResponse, UpdateExpenseData, UpdateExpenseResponse, GetExpenseBalanceData, GetExpenseBalanceResponse } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const getAllExpenses = <ThrowOnError extends boolean = false>(options?: Options<GetAllExpensesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllExpensesResponse, unknown, ThrowOnError>({
        url: '/expenses',
        ...options
    });
};

export const createExpense = <ThrowOnError extends boolean = false>(options: Options<CreateExpenseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        url: '/expenses',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteExpense = <ThrowOnError extends boolean = false>(options: Options<DeleteExpenseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteExpenseResponse, unknown, ThrowOnError>({
        url: '/expenses/{id}',
        ...options
    });
};

export const getExpenseById = <ThrowOnError extends boolean = false>(options: Options<GetExpenseByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetExpenseByIdResponse, unknown, ThrowOnError>({
        url: '/expenses/{id}',
        ...options
    });
};

export const updateExpense = <ThrowOnError extends boolean = false>(options: Options<UpdateExpenseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateExpenseResponse, unknown, ThrowOnError>({
        url: '/expenses/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getExpenseBalance = <ThrowOnError extends boolean = false>(options: Options<GetExpenseBalanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetExpenseBalanceResponse, unknown, ThrowOnError>({
        url: '/expenses/balance',
        ...options
    });
};